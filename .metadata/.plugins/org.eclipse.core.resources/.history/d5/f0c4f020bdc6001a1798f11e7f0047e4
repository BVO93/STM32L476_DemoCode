/*
 * main.c

 *
 *  Created on: 30 Apr 2020
 *      Author: bjorn
 */

#include<string.h>
#include "stm32l4xx_hal.h"
#include "main.h"
#include <stdarg.h>

void SystemClockConfig(void);
void printClockFreq(void);
void GPIO_Init(void);

void UART2_Init(void);

void Error_handler(void);
void printmsg(char *format,...);
char* getDayofweek(uint8_t number);

void RTCInit(void);
void 	RTC_CalanderConfig(void);
// HANDLES
UART_HandleTypeDef huart2;
RTC_HandleTypeDef hrtc;


// UART
uint16_t lenOfData = 0;
char *userData = "Hello , ready ! \r\n";
char msg[100];

int main() {

	HAL_Init();
	SystemClockConfig();
	GPIO_Init();
	UART2_Init();

	// Print f of clock to make sure they are working
	printClockFreq();
	HAL_Delay(100);



	memset(msg, 0, sizeof(msg));
	sprintf(msg, " Init done \n");
	lenOfData = strlen(msg);
	HAL_UART_Transmit(&huart2, (uint8_t*) msg, lenOfData, HAL_MAX_DELAY);

	RTCInit();

	RTC_CalanderConfig();

	memset(msg, 0, sizeof(msg));
	sprintf(msg, "Calander has been set ");
	lenOfData = strlen(msg);
	HAL_UART_Transmit(&huart2, (uint8_t*) msg, lenOfData, HAL_MAX_DELAY);
	HAL_Delay(10);


	while (1);

	return 0;
}


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
	 RTC_TimeTypeDef RTC_TimeRead;
	 RTC_DateTypeDef RTC_DateRead;

	 HAL_RTC_GetTime(&hrtc,&RTC_TimeRead,RTC_FORMAT_BIN);

	 HAL_RTC_GetDate(&hrtc,&RTC_DateRead,RTC_FORMAT_BIN);


	 printmsg("Current Time is : %02d:%02d:%02d\r\n",RTC_TimeRead.Hours,\
			 RTC_TimeRead.Minutes,RTC_TimeRead.Seconds);
	 printmsg("Current Date is : %02d-%2d-%2d  <%s> \r\n",RTC_DateRead.Month,RTC_DateRead.Date,\
			 RTC_DateRead.Year,getDayofweek(RTC_DateRead.WeekDay));
}

void printmsg(char *format,...)
{

	char str[80];

	/*Extract the the argument list using VA apis */
	va_list args;
	va_start(args, format);
	vsprintf(str, format,args);
	HAL_UART_Transmit(&huart2,(uint8_t *)str, strlen(str),HAL_MAX_DELAY);
	va_end(args);

 }



// ******** SYSTEM CLOCK INIT ********** //
void SystemClockConfig(void) {
	RCC_OscInitTypeDef osc_init;
	RCC_ClkInitTypeDef clk_init;

	memset(&osc_init, 0, sizeof(osc_init));
	osc_init.OscillatorType = RCC_OSCILLATORTYPE_LSI;
	osc_init.LSIState = RCC_LSI_ON;
	//osc_init.HSICalibrationValue =  To calibrate the value of the clk in steps of 80 Khz.
	if (HAL_RCC_OscConfig(&osc_init) != HAL_OK) {
		memset(msg, 0, sizeof(msg));
		sprintf(msg, " Sysclk Went wrong");
		lenOfData = strlen(msg);
		HAL_UART_Transmit(&huart2, (uint8_t*) msg, lenOfData, HAL_MAX_DELAY);

		Error_handler();
	}

	clk_init.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK |
	RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	clk_init.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
	clk_init.AHBCLKDivider = RCC_SYSCLK_DIV1;
	clk_init.APB1CLKDivider = RCC_HCLK_DIV1;
	clk_init.APB2CLKDivider = RCC_HCLK_DIV1;

	if (HAL_RCC_ClockConfig(&clk_init, FLASH_LATENCY_0) != HAL_OK){
		memset(msg, 0, sizeof(msg));
			sprintf(msg, " RCC clock Config went zrong");
			lenOfData = strlen(msg);
			HAL_UART_Transmit(&huart2, (uint8_t*) msg, lenOfData, HAL_MAX_DELAY);



		Error_handler();
	}

	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / 1000);
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);

	return;
}

// ******** INITIALIZE UART ********** //
void UART2_Init(void) {
	huart2.Instance = USART2; // This is declared in stm32l476xx.h as the coorect adress
	huart2.Init.BaudRate = 115200;
	huart2.Init.WordLength = UART_WORDLENGTH_8B; 	// 8 bit word legth
	huart2.Init.StopBits = UART_STOPBITS_1;
	huart2.Init.Parity = UART_PARITY_NONE;
	huart2.Init.Parity = UART_PARITY_NONE;
	huart2.Init.Mode = UART_MODE_TX_RX;

	if (HAL_UART_Init(&huart2) != HAL_OK) {	// Everything is set, now give adress of huart
		Error_handler();								// Check if went ok
	}

	return;
}

// ******** PRINT CLOCK FREQ ********** //
void printClockFreq(void){


	HAL_UART_Transmit(&huart2, (uint8_t*) userData, lenOfData, HAL_MAX_DELAY);

	memset(msg, 0, sizeof(msg));
	sprintf(msg, "SYSCLK: %ld\r\n", HAL_RCC_GetSysClockFreq());
	lenOfData = strlen(msg);
	HAL_UART_Transmit(&huart2, (uint8_t*) msg, lenOfData, HAL_MAX_DELAY);

	memset(msg, 0, sizeof(msg));
	sprintf(msg, "HCLK: %ld\r\n", HAL_RCC_GetHCLKFreq());
	lenOfData = strlen(msg);
	HAL_UART_Transmit(&huart2, (uint8_t*) msg, lenOfData, HAL_MAX_DELAY);

	memset(msg, 0, sizeof(msg));
	sprintf(msg, "PCLK1: %ld\r\n", HAL_RCC_GetPCLK1Freq());
	lenOfData = strlen(msg);
	HAL_UART_Transmit(&huart2, (uint8_t*) msg, lenOfData, HAL_MAX_DELAY);

	memset(msg, 0, sizeof(msg));
	sprintf(msg, "PCLK2: %ld\r\n\n", HAL_RCC_GetPCLK2Freq());
	lenOfData = strlen(msg);
	HAL_UART_Transmit(&huart2, (uint8_t*) msg, lenOfData, HAL_MAX_DELAY);

	return;
}

// ******** GPIO INIT ********** //
void GPIO_Init(void) {
	__HAL_RCC_GPIOA_CLK_ENABLE();
	GPIO_InitTypeDef ledgpio;
	ledgpio.Pin = GPIO_PIN_5;
	ledgpio.Mode = GPIO_MODE_OUTPUT_PP;
	ledgpio.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(GPIOA, &ledgpio);

	GPIO_InitTypeDef pinD8;
	pinD8.Pin = GPIO_PIN_8;
	pinD8.Mode = GPIO_MODE_OUTPUT_PP;
	pinD8.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(GPIOA, &pinD8);

	GPIO_InitTypeDef pinD9;
	pinD9.Pin = GPIO_PIN_9;
	pinD9.Mode = GPIO_MODE_OUTPUT_PP;
	pinD9.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(GPIOA, &pinD9);

	GPIO_InitTypeDef pin13;
	pin13.Pin = GPIO_PIN_13;
	pin13.Mode = GPIO_MODE_IT_FALLING;
	pin13.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(GPIOC, &pin13);



	// Set all pins low
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);

	return;
}

void RTCInit(void){
	  hrtc.Instance = RTC;
	   hrtc.Init.HourFormat =RTC_HOURFORMAT_12;
	   hrtc.Init.AsynchPrediv = 0x7F;
	   hrtc.Init.SynchPrediv = 0xFF;
	   hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
	   hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_LOW;
	   hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;

	if(HAL_RTC_Init(&hrtc) != HAL_OK){
		memset(msg, 0, sizeof(msg));
		sprintf(msg, "HAL RTC INIT GONE WRONG \n");
		lenOfData = strlen(msg);
		HAL_UART_Transmit(&huart2, (uint8_t*) msg, lenOfData, HAL_MAX_DELAY);

		Error_handler();
	}

	memset(msg, 0, sizeof(msg));
	sprintf(msg, "RTC Init done \n");
	lenOfData = strlen(msg);
	HAL_UART_Transmit(&huart2, (uint8_t*) msg, lenOfData, HAL_MAX_DELAY);

	printmsg("RTC Init done \n");

	return;


}

void RTC_CalanderConfig(void){
	// Configure the time of the calander
	RTC_TimeTypeDef RTC_TimeInit;
	RTC_DateTypeDef RTC_DateInit;

	RTC_TimeInit.Hours = 12;
	RTC_TimeInit.Minutes = 11;
	RTC_TimeInit.SecondFraction = 10;
	RTC_TimeInit.TimeFormat = RTC_HOURFORMAT12_PM;
	if(HAL_RTC_SetTime(&hrtc, &RTC_TimeInit, RTC_FORMAT_BCD) != HAL_OK){
		memset(msg, 0, sizeof(msg));
		sprintf(msg, "RTC Set Time gone wrong ");
		lenOfData = strlen(msg);
		HAL_UART_Transmit(&huart2, (uint8_t*) msg, lenOfData, HAL_MAX_DELAY);

		Error_handler();

	}

	RTC_DateInit.Date = 12;
	RTC_DateInit.Month = RTC_MONTH_JUNE;
	RTC_DateInit.Year = 18;
	RTC_DateInit.WeekDay = RTC_WEEKDAY_TUESDAY;

	if(HAL_RTC_SetDate(&hrtc, &RTC_DateInit, RTC_FORMAT_BCD) != HAL_OK){
		memset(msg, 0, sizeof(msg));
		sprintf(msg, "Set date gone wrong");
		lenOfData = strlen(msg);
		HAL_UART_Transmit(&huart2, (uint8_t*) msg, lenOfData, HAL_MAX_DELAY);

		Error_handler();
	}

	memset(msg, 0, sizeof(msg));
		sprintf(msg, "Calander Init done \n");
		lenOfData = strlen(msg);
		HAL_UART_Transmit(&huart2, (uint8_t*) msg, lenOfData, HAL_MAX_DELAY);


	printmsg("Calender config done \n");

	return;
}

char* getDayofweek(uint8_t number)
{
	char *weekday[] = { "Monday", "TuesDay", "Wednesday","Thursday","Friday","Saturday","Sunday"};

	return weekday[number-1];
}



void Error_handler(void) {

	// If in error set D7 high and write message
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);

	memset(msg, 0, sizeof(msg));
	sprintf(msg, "Something went wrong, stuck in error  !");
	lenOfData = strlen(msg);
	HAL_UART_Transmit(&huart2, (uint8_t*) msg, lenOfData, HAL_MAX_DELAY);
	HAL_Delay(10);

	while (1);
}
